import asyncio
import logging
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from decouple import config


API_TOKEN = config('API_TOKEN')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)



button_hi = types.KeyboardButton('–ó–ê–†–ï–ì–ê–¢–¨–°–Ø! üëã')
greet_kb = types.ReplyKeyboardMarkup()
greet_kb.add(button_hi)


g_inline_keyboard = types.InlineKeyboardMarkup()
g_inline_keyboard.add(types.InlineKeyboardButton('button1',callback_data=''))

scratch_url = 'https://scratch.mit.edu/projects/142394929'
back_inline = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('HMM GO BACK', callback_data='mainMenu'))
back_inline.add(types.InlineKeyboardButton('LINK to Scratch', url=scratch_url))



class MenuState(StatesGroup):
    menu = State()  

class FormRegistration(StatesGroup):
    name = State()  
    age = State()  
    money = State() 
    check = State() 

    




@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç –ø—Ä–æ–π–¥–∏ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–∫–æ–ª—É!",reply_markup=greet_kb)
    await MenuState.menu.set()



@dp.message_handler(state=MenuState.menu)
async def echo(message: types.Message):
    if message.text == '–ó–ê–†–ï–ì–ê–¢–¨–°–Ø! üëã':
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è:\n –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ë–æ–ª—å—à–æ–π –±—É–∫–≤–∏",reply_markup=types.ReplyKeyboardRemove())
        await FormRegistration.name.set()

@dp.message_handler(state=FormRegistration.name)
async def reg_name(message: types.Message, state: FSMContext):
    await message.reply(f'LOLüòÑ –¢–µ–±—è –∑–æ–≤—É—Ç: {message.text}, —Ö–æ—Ç—è —è –∑–Ω–∞—é —Ç–µ–±—è –∫–∞–∫ {message.from_user.first_name} {message.from_user.last_name}!!\n –ù—É —Ç–∏ –∏ –ö–∞–∫–∞—à–∫–∞!!')
    await message.reply(f'–û–ö, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç {message.text}')
    await state.update_data(name=message.text)
    await FormRegistration.age.set()




@dp.message_handler(lambda message: message.text.isdigit(), state=FormRegistration.age)
async def process_age(message: types.Message, state: FSMContext):
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–û–ö, —Ç–æ–≥–¥–∞ –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥ –º–∞–ª–∏—â–©–©!!')
    await state.update_data(age=int(message.text))
    await FormRegistration.next()

@dp.message_handler(lambda message: message.text.isdigit(), state=FormRegistration.money)
async def process_money(message: types.Message, state: FSMContext):
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê')
    await message.reply(f'–¢–µ—Ä—è–π—Å—è')
    await message.reply(f'–Ø –∑–∞–±—Ä–∞–ª —É —Ç–µ–±—è –¥–µ–Ω—å–≥–∏!')
    await FormRegistration.next()
    async with state.proxy() as data:
        data['money'] = int(message.text)
        tt = f"""–ù–£ –∑–Ω–∞—á–∏—Ç {data.get('name')}
        –¢–µ–±–µ {data.get('age')}
        –ù—É –∏ —É —Ç–µ–±—è 0 - {data.get('money')}
        C —Ç–µ–±—è 10000 –¥–æ–ª–∞—Ä–æ–≤!
        –Ø –∑–Ω–∞—é –≥–¥–µ —Ç–∏ –∂–∏–≤–µ—à—å!!
        –£ —Ç–µ–±—è 10 —á–∞—Å–æ–≤!
        """
    back_inline = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–Ø –≤—Å–µ–∫ –ø–æ–Ω—è–ª —Å –º–Ω–µ 10000 –¥–æ–ª–∞—Ä–æ–≤', callback_data='YES'))
    await message.reply(f'–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–µ–ª—å–Ω–æ —è —Ç–µ–±—è –ø–æ–Ω—è–ª?')
    await message.answer(tt,reply_markup=back_inline)
    
@dp.callback_query_handler(lambda c: c.data == 'YES', state= FormRegistration.check)
async def progress_check(clq: types.CallbackQuery, state: FSMContext):
    await clq.message.reply(f'–£ —Ç–µ–±—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—å—Å—è –≤—Ä–µ–º—è—è—è—è—è—è—è!!!')
    await state.finish()
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


